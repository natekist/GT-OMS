Yes
install.packages("Ecdat")
data = data(Housing)
data(Housing)
help(Ecdat)
library(Ecdat)
data(Housing)
Ecdat.data(Housing)
Ecdat
Ecdat
help(package = "Ecdat")
library(Ecdat)
knitr::opts_chunk$set(echo = FALSE)
# install.packages("ggplot2")
# install.packages("dplyr")
# install.packages("readr")
# install.packages("Ecdat")
# if (!require(Ecdat)) install.packages("Ecdat")
library(ggplot2)
library(dplyr)
library(readr)
library(Ecdat)
install.packages("Ecfun")
data = Ecdat::Housing
View(data)
lm(formula = price~lotsize, data = data)
lm(formula = price~lotsize+bedrooms, data = data)
result = lm(formula = price~lotsize+bedrooms, data = data)
View(result)
View(result)
View(result)
result = lm(formula = price~lotsize+bedrooms, data = data)
print(result)
result <- lm(formula = price~lotsize+bedrooms, data = data)
knitr::opts_chunk$set(echo = TRUE)
library(Ecdat)
knitr::opts_chunk$set(echo = TRUE)
library(Ecdat)
knitr::opts_chunk$set(echo = TRUE)
library(Ecdat)
library(Ecdat)
library(Ecdat)
install.packages(ISLR)
install.packages("ISLR")
names(Carseats)
model <- lm(Sales~., data=Carseats)
model <- lm(Sales~., data=data)
head(d)
library("ISLR")
library("ISLR")
d <- data("Carseats")
library("ISLR")
d <- data("Carseats")
head(d)
library(ISLR)
attach(Carseats)
model <- lm(Sales~., data=Carseats)
library(ISLR)
attach(Carseats)
model <- lm(Sales~Price, data=Carseats)
library(ISLR)
attach(Carseats)
model <- lm(Sales~Price, data=Carseats)
summary(model)
library(ISLR)
attach(Carseats)
model <- lm(Sales~Price+Bad_Shelf+Good_Shelf, data=Carseats)
summary(model)
library(ISLR)
attach(Carseats)
model <- lm(Sales~Price+Bad_Shelf+Good_Shelf, data=Carseats)
summary(model)
library(ISLR)
attach(Carseats)
head(Carseats)
library(ISLR)
library(dplyr)
attach(Carseats)
Carseats <- Carseats %>% mutate(Bad_Shelf = ifelse(ShelveLoc = "Bad", 1, 0))
Carseats <- Carseats %>% mutate(Good_Shelf = ifelse(ShelveLoc = "Good", 1, 0))
model <- lm(Sales~Price+Bad_Shelf+Good_Shelf, data=Carseats)
summary(model)
library(ISLR)
library(dplyr)
attach(Carseats)
Carseats <- Carseats %>% mutate(Bad_Shelf = ifelse(ShelveLoc = "Bad", 1, 0))
Carseats <- Carseats %>% mutate(Good_Shelf = ifelse(ShelveLoc = "Good", 1, 0))
head(Carseats)
library(ISLR)
library(dplyr)
attach(Carseats)
data <- data.frame(Carseats)
data <- data %>% mutate(Bad_Shelf = ifelse(ShelveLoc = "Bad", 1, 0))
data <- data %>% mutate(Good_Shelf = ifelse(ShelveLoc = "Good", 1, 0))
head(data)
library(ISLR)
library(dplyr)
attach(Carseats)
data <- data.frame(Carseats)
head(data)
library(ISLR)
library(dplyr)
attach(Carseats)
data <- data.frame(Carseats)
head(data)
data <- data %>% mutate(Bad_Shelf = ifelse(ShelveLoc = "Bad", 1, 0))
library(ISLR)
library(dplyr)
attach(Carseats)
data <- data.frame(Carseats)
head(data)
data <- data %>% mutate(Bad_Shelf = ifelse(ShelveLoc == "Bad", 1, 0))
data <- data %>% mutate(Good_Shelf = ifelse(ShelveLoc == "Good", 1, 0))
head(data)
library(ISLR)
library(dplyr)
attach(Carseats)
data <- data.frame(Carseats)
data <- data %>% mutate(Bad_Shelf = ifelse(ShelveLoc == "Bad", 1, 0))
data <- data %>% mutate(Good_Shelf = ifelse(ShelveLoc == "Good", 1, 0))
model <- lm(Sales~Price+Bad_Shelf+Good_Shelf, data=data)
summary(model)
csvfile <- read.csv("/Users/natekistler/Downloads/PriceDemand.csv")
head(csvfile)
csvfile <- read.csv("/Users/natekistler/Downloads/PriceDemand.csv", header = TRUE)
m <- lm(Qty~Price, data=csvfile)
summary(m)
csvfile <- read.csv("/Users/natekistler/Downloads/PriceDemand.csv", header = TRUE)
csvfile <- csvfile %>% mutate(lnPrice = log(Price))
m <- lm(Qty~lnPrice, data=csvfile)
summary(m)
csvfile <- read.csv("/Users/natekistler/Downloads/PriceDemand.csv", header = TRUE)
csvfile <- csvfile %>% mutate(lnPrice = log(Price))
csvfile <- csvfile %>% mutate(lnQty = log(Qty))
m <- lm(lnQty~Price, data=csvfile)
summary(m)
csvfile <- read.csv("/Users/natekistler/Downloads/PriceDemand.csv", header = TRUE)
csvfile <- csvfile %>% mutate(lnPrice = log(Price))
csvfile <- csvfile %>% mutate(lnQty = log(Qty))
m <- lm(lnQty~lnPrice, data=csvfile)
summary(m)
csvfile <- read.csv("/Users/natekistler/Downloads/PriceDemand.csv", header = TRUE)
csvfile <- csvfile %>% mutate(lnPrice = log(Price))
csvfile <- csvfile %>% mutate(lnQty = log(Qty))
m <- lm(Qty~lnPrice, data=csvfile)
summary(m)
install.packages(c(
'repr',
'IRdisplay',
'evaluate',
'crayon',
'pbdZMQ',
'devtools',
'uuid',
'digest',
'git2r'
), dependencies = TRUE)
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest", "git2r"), dependencies = TRUE)
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
install.packages("ellipsis")
install.packages("ellipsis")
IRkernel::installspec()
install.packages("jupyter")
install.packages("jupyter-client")
install.packages(MASS)
install.packages(Car)
install.packages("Car")
install.packages("car")
install.packages("aod")
setwd("~/Documents/GitHub/GT-OMS/IYSE 6414/Homework/Homework 5")
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
# Set Seed to 100
set.seed(100)
View(DistPA5.9)
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
# Set Seed to 100
set.seed(100)
View(data)
View(X)
View(X)
View(data)
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
dataNew = c(data, X)
# Set Seed to 100
set.seed(100)
View(dataNew)
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
dataNew = c(data$ED.visits, X)
# Set Seed to 100
set.seed(100)
View(dataNew)
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
dataNew = data.frame(data$ED.visits, X)
# Set Seed to 100
set.seed(100)
View(dataNew)
model1 <- glm(ED.visits ~ sAvgDistS + sAvgDistP + sMedianIncome + sNumHospitals + sPercentLessHS + sPercentHS, data=dataNew, family="poisson")
model2 <- glm(ED.visits ~ ., data=dataNew, family="poisson")
summary(model1)
summary(model1)
summary(model2)
forback = step(model1, scope=list(lower=model1, upper=model2), direction="both")
summary(forback)
View(dataNew)
model1 <- glm(data.ED.visits ~ sAvgDistS + sAvgDistP + sMedianIncome + sNumHospitals + sPercentLessHS + sPercentHS, data=dataNew, family="poisson")
model2 <- glm(data.ED.visits ~ . -data., data=dataNew, family="poisson")
View(dataNew)
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
dataNew = data.frame(data$ED.visits, X)
# Set Seed to 100
set.seed(100)
model1 <- glm(data.ED.visits ~ sAvgDistS + sAvgDistP + sMedianIncome + sNumHospitals + sPercentLessHS + sPercentHS, data=dataNew, family="poisson")
model2 <- glm(data.ED.visits ~ ., data=dataNew, family="poisson")
summary(model1)
summary(model2)
forback = step(model1, scope=list(lower=model1, upper=model2), direction="both")
summary(forback)
summary(model2)
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
set.seed(100)
# Ensure that the sampling type is correct
RNGkind(sample.kind="Rejection")
# Reading the data:
data = read.csv("GA_EDVisits.csv",header=TRUE)
data = na.omit(data)
# Get names of the column
names = colnames(data)
attach(data)
# Standardized predictors - use these variables in your modeling in addition to the predictors A5.9, A10.14
sAvgDistS = scale(log(SpecDist))
sAvgDistP = scale(log(PedDist))
sMedianIncome = scale(MedianIncome)
sNumHospitals = scale(No.Hospitals)
sPercentLessHS = scale(PercentLessHS)
sPercentHS = scale(PercentHS)
# Define interaction terms
DistA5.9 = sAvgDistS*A5.9
DistA10.14 = sAvgDistS* A10.14
DistIncome = sAvgDistS*sMedianIncome
DistLessHS = sAvgDistS*sPercentLessHS
DistHS = sAvgDistS*sPercentHS
DistPA5.9 = sAvgDistP*A5.9
DistPA10.14 = sAvgDistP* A10.14
DistPIncome = sAvgDistP*sMedianIncome
DistPLessHS = sAvgDistP*sPercentLessHS
DistPHS = sAvgDistP*sPercentHS
# Define final data frame
X = data.frame(A5.9, A10.14, sAvgDistS, sAvgDistP, sMedianIncome,sPercentLessHS,sPercentHS, sNumHospitals,DistA5.9, DistA10.14, DistIncome,DistLessHS, DistHS, DistPA5.9, DistPA10.14, DistPIncome,DistPLessHS, DistPHS)
set.seed(100)
lassomodel <- glmnet(X, data$ED.visits, alpha=1, nlambda = 100)
library(MASS)
set.seed(100)
lassomodel <- glmnet(X, data$ED.visits, alpha=1, nlambda = 100)
install.packages("glmnet")
library(glmnet)
set.seed(100)
lassomodel <- glmnet(X, data$ED.visits, alpha=1, nlambda = 100)
View(X)
library(glmnet)
set.seed(100)
lassomodel = glmnet(X, data$ED.visits, alpha=1, nlambda = 100)
View(data)
data[,2]
lassomodel = glmnet(X, data[,2], alpha=1, nlambda = 100)
lassomodel = glmnet(X, data[,2], alpha=1, nlambda = 100)
lassomodel = glmnet(as.Matrix(X), data[,2], alpha=1, nlambda = 100)
library(glmnet)
set.seed(100)
lassomodel = glmnet(as.matrix(X), data[,2], alpha=1, nlambda = 100)
summary(lassmodel)
summary(lassomodel)
library(glmnet)
set.seed(100)
lassomodel = cv.glmnet(as.matrix(X), data[,2], alpha=1)
summary(lassomodel)
library(glmnet)
set.seed(100)
lassomodel = cv.glmnet(as.matrix(X), data[,2], alpha=1, nfolds = 10)
summary(lassomodel)
coef(lassomodel, lassomodel.cv$lambda.min)
lassomodel.cv = cv.glmnet(as.matrix(X), data[,2], alpha=1, nfolds = 10)
lassomodel = glmnet(as.matrix(X), data[, 2], alpha = 1, nlambda=100)
coef(lassomodel, lassomodel.cv$lambda.min)
lassomodel.cv$lambda.min
plot(lassmodel, xvar='lambda', label=TRUE, lwd=2)
plot(lassomodel, xvar='lambda', label=TRUE, lwd=2)
coef(lassomodel, lassomodel.cv$0)
coef(lassomodel, 0)
enetmodel.cv = cv.glmnet(as.matrix(X), data[,2], alpha=0.5, nfolds=10)
enetmodel = glmnet(as.matrix(X), data=[,2], alpha=0.5, nlambda=100)
plot(enetmodel, xvar='lambda', label=TRUE, lwd=2)
coef(enetmodel, s=enetmodel.cv$lambda.min)
enetmodel.cv = cv.glmnet(as.matrix(X), data[,2], alpha=0.5, nfolds=10)
enetmodel = glmnet(as.matrix(X), data[,2], alpha=0.5, nlambda=100)
plot(enetmodel, xvar='lambda', label=TRUE, lwd=2)
coef(enetmodel, s=enetmodel.cv$lambda.min)
set.seed(100)
enetmodel.cv = cv.glmnet(as.matrix(X), data[,2], alpha=0.5, nfolds=10)
enetmodel = glmnet(as.matrix(X), data[,2], alpha=0.5, nlambda=100)
plot(enetmodel, xvar='lambda', label=TRUE, lwd=2)
coef(enetmodel, s=enetmodel.cv$lambda.min)
set.seed(100)
lassomodel.cv = cv.glmnet(as.matrix(X), data[,2], alpha=1, nfolds = 10)
lassomodel = glmnet(as.matrix(X), data[, 2], alpha = 1, nlambda=100)
lassomodel.cv$lambda.min
plot(lassomodel, xvar='lambda', label=TRUE, lwd=2)
coef(lassomodel, s=lassmodel.cv$lambda.min)
library(glmnet)
set.seed(100)
lassomodel.cv = cv.glmnet(as.matrix(X), data[,2], alpha=1, nfolds = 10)
lassomodel = glmnet(as.matrix(X), data[, 2], alpha = 1, nlambda=100)
lassomodel.cv$lambda.min
plot(lassomodel, xvar='lambda', label=TRUE, lwd=2)
coef(lassomodel, s=lassomodel.cv$lambda.min)
set.seed(100)
enetmodel.cv = cv.glmnet(as.matrix(X), data[,2], alpha=0.5, nfolds=10)
enetmodel = glmnet(as.matrix(X), data[,2], alpha=0.5, nlambda=100)
plot(enetmodel, xvar='lambda', label=TRUE, lwd=2)
coef(enetmodel, s=enetmodel.cv$lambda.min)
