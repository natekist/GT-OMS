
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: /home/notebook/work/Q3.ipynb

from pyspark.sql.functions import col
from pyspark.sql import *

def user():
    # Returns a string consisting of your GT username.
    return 'nkistler3'

def long_trips(trips):
    # Returns a Dataframe with Schema the same as :trips:
    ltrips = trips.filter(col("trip_distance") >= 2)
    return ltrips

def manhattan_trips(trips, lookup):
    # Returns a Dataframe with Schema: DOLocationID, pcount
    df = trips.join(lookup, trips.DOLocationID == lookup.LocationID).filter(col("Borough") == "Manhattan").groupBy("DOLocationID").agg( {"passenger_count" : "sum"} ).select(col("DOLocationID"), col("sum(passenger_count)").alias("pcount")).sort(col("pcount").desc()).limit(20)
    return df

def weighted_profit(trips, mtrips):
    # Returns a Dataframe with Schema: PULocationID, weighted_profit
    # Note: Use decimal datatype for weighted profit (NOTE: DON'T USE FLOAT)
    # Our grader will be only be checking the first 8 characters for each value in the dataframe
    trips2 = trips.groupBy("PULocationID").agg({"total_amount": "avg", "PULocationID": "count"})
    df = trips.join(mtrips, trips.DOLocationID == mtrips.DOLocationID).groupBy("PULocationID").count()
    trips2 = trips2.join(df, trips2.PULocationID == df.PULocationID).select(trips2.PULocationID, col("avg(total_amount)"), col("count(PULocationID)"), col("count"))
    trips2 = trips2.withColumn("proportion", col("count") / col("count(PULocationID)")).withColumn("weighted_profit", col("proportion") * col("avg(total_amount)"))
    trips2 = trips2.select(trips2.columns[0], col("weighted_profit").cast("double"))
    return trips2

def final_output(calc, lookup):
    # Returns a Dataframe with Schema: Zone, Borough, weighted_profit
    # Note: Use decimal datatype for weighted profit (NOTE: DON'T USE FLOAT)
    # Our grader will be only be checking the first 8 characters for each value in the dataframe
    df = calc.join(lookup, calc.PULocationID == lookup.LocationID).select(col("Zone"), col("Borough"), col("weighted_profit")).sort(col("weighted_profit").desc()).limit(20)
    return df